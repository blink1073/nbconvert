name: Tests

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -eux {0}

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    env:
      NBFORMAT_VALIDATOR: jsonschema
    strategy:
      matrix:
        os: ["macos-latest", "windows-latest"]
        python-version: ["3.7", "3.11"]
        include:
          - os: "windows-latest"
            python-version: "3.8"
          - os: "macos-latest"
            python-version: "3.9"
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install Inkscape on Windows
        if: ${{ startsWith('windows', matrix.os ) }}
        run: choco install inkscape

      - name: Run tests
        run: |
          hatch run cov:test

      - name: Code coverage
        run: |
          pip install codecov coverage[toml]
          codecov

  linux_tests:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      NBFORMAT_VALIDATOR: jsonschema
    strategy:
      matrix:
        python-version: ["3.8", "3.11"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - name: Install Depenedencies
        shell: bash -l {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-devlibxkbcommon-dev libxkbcommon-x11-dev
          conda install -c conda-forge -y pandoc latexmk texlive-core pyqt hatch coverage pytest-cov pyqt<6
          pip install -e .[all]

      - name: Run tests
        shell: bash -l {0}
        run: |
          xvfb-run --auto-servernum python -m pytest -vv --cov nbconvert --cov-branch --cov-report term-missing:skip-covered

      - name: Code coverage
        run: |
          pip install codecov coverage[toml]
          codecov

  check_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - run: pip install -e .
      - uses: jupyter-server/jupyter_releaser/.github/actions/check-release@v2
        with:
          version_spec: 10.10.10
          token: ${{ secrets.GITHUB_TOKEN }}

  check_links:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1
        with:
          ignore_links: 'https://ipywidgets.readthedocs.io/en/latest/examples/Output'

  test_lint:
    name: Test Lint
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      -  name: Run Linters
         run: |
          hatch run typing:test
          hatch run lint:style
          pipx run 'validate-pyproject[all]' pyproject.toml
          pipx run doc8 --max-line-length=200

  test_minimum_versions:
    name: Test Minimum Versions
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
        with:
          dependency_type: minimum
          only_create_file: 1
      - name: Run the unit tests
        run: |
          export NBFORMAT_VALIDATOR=jsonschema
          hatch run test:nowarn || hatch run test:nowarn --lf

  test_prereleases:
    name: Test Prereleases
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
        with:
         dependency_type: pre
      - name: Run the tests
        run: |
          export NBFORMAT_VALIDATOR=jsonschema
          hatch run test:nowarn || hatch run test:nowarn --lf

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/make-sdist@v1

  test_sdist:
    runs-on: ubuntu-latest
    needs: [make_sdist]
    name: Install from SDist and Test
    timeout-minutes: 10
    steps:
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/test-sdist@v1

  tests_check: # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - linux_tests
      - tests
      - test_lint
      - test_minimum_versions
      - test_prereleases
      - check_links
      - check_release
      - test_sdist
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
